# Build Configuration for Travis
# https://travis-ci.org

language:
  - cpp

python:
  - "3.5"

jdk: oraclejdk8

matrix:
  # Show final status immediately if a test fails.
  fast_finish: true
  include:
    # Android build.
    - os: linux
      compiler: gcc
      sudo: required
      env: KSB_TARGET=ANDROID ANDROID_TARGET=android-21 ANDROID_ABI=armeabi-v7a
    # Linux GCC debug build.
    - os: linux
      compiler: gcc
      sudo: required
      dist: trusty
      env: KSB_TARGET=LINUX VULKAN_SAMPLES_BUILD_TYPE=Debug
    # Linux GCC release build.
    - os: linux
      compiler: gcc
      sudo: required
      dist: trusty
      env: KSB_TARGET=LINUX VULKAN_SAMPLES_BUILD_TYPE=Release
    # Linux Clang debug build.
    - os: linux
      compiler: clang
      sudo: required
      dist: trusty
      env: KSB_TARGET=LINUX VULKAN_SAMPLES_BUILD_TYPE=Debug
    # Linux Clang release build.
    - os: linux
      compiler: clang
      sudo: required
      dist: trusty
      env: KSB_TARGET=LINUX VULKAN_SAMPLES_BUILD_TYPE=Release
    # Linux GCC build for code coverage.
    - os: linux
      compiler: gcc
      sudo: required
      dist: trusty
      env: KSB_TARGET=COVERAGE
    # Linux Clang build for scan-build.
    - os: linux
      compiler: clang
      sudo: required
      dist: trusty
      env: KSB_TARGET=SCAN
    # Mac OS X Clang debug build.
    - os: osx
      compiler: clang
      sudo: required
      env: KSB_TARGET=OSX VULKAN_SAMPLES_BUILD_TYPE=Debug
    # Mac OS X Clang release build.
    - os: osx
      compiler: clang
      sudo: required
      env: KSB_TARGET=OSX VULKAN_SAMPLES_BUILD_TYPE=Release

cache:
  apt: true

branches:
  only:
    - master

addons:
  apt:
    packages:
      - ninja-build
      - lcov

android:
  components:
    - tools
    - platform-tools
    - build-tools-23.0.2
    - android-23

before_install:
  # Install the appropriate Linux packages.
  - if [[ "$KSB_TARGET" == "LINUX" || "$KSB_TARGET" == "COVERAGE" || "$KSB_TARGET" == "SCAN" ]]; then sudo apt-get update; fi
  - if [[ "$KSB_TARGET" == "LINUX" || "$KSB_TARGET" == "COVERAGE" || "$KSB_TARGET" == "SCAN" ]]; then sudo apt-get -y install python3 libx11-dev libxxf86vm-dev libxrandr-dev libxcb1-dev libxcb-keysyms1-dev libxcb-icccm4-dev clang; fi
  # Install ninja on Mac OS X.
  - if [[ "$KSB_TARGET" == "OSX" ]]; then brew update; fi
  - if [[ "$KSB_TARGET" == "OSX" ]]; then brew install ninja; fi
  - if [[ "$KSB_TARGET" == "OSX" ]]; then brew install python3; fi
  - if [[ "$KSB_TARGET" == "OSX" ]]; then virtualenv venv -p python3; fi
  - if [[ "$KSB_TARGET" == "OSX" ]]; then source venv/bin/activate; fi
  # Install the Android NDK.
  - if [[ "$KSB_TARGET" == "ANDROID" ]]; then sudo apt-get -y install python3; fi
  - if [[ "$KSB_TARGET" == "ANDROID" ]]; then export ARCH=`uname -m`; fi
  - if [[ "$KSB_TARGET" == "ANDROID" ]]; then wget http://dl.google.com/android/repository/android-ndk-r13b-linux-${ARCH}.zip; fi
  - if [[ "$KSB_TARGET" == "ANDROID" ]]; then unzip -u -q android-ndk-r13b-linux-${ARCH}.zip; fi
  - if [[ "$KSB_TARGET" == "ANDROID" ]]; then export ANDROID_NDK_HOME=`pwd`/android-ndk-r13b; fi
  - if [[ "$KSB_TARGET" == "ANDROID" ]]; then export JAVA_HOME="/usr/lib/jvm/java-8-oracle"; fi
  - if [[ "$KSB_TARGET" == "ANDROID" ]]; then export PATH="$ANDROID_NDK_HOME:$PATH"; fi

install:
  - if [[ "$KSB_TARGET" == "LINUX" || "$KSB_TARGET" == "COVERAGE" || "$KSB_TARGET" == "SCAN" ]]; then pip install --user nose; fi
  - if [[ "$KSB_TARGET" == "LINUX" || "$KSB_TARGET" == "COVERAGE" || "$KSB_TARGET" == "SCAN" ]]; then pip install --user cpp-coveralls; fi
    # Make sure we can find the above Python packages
  - if [[ "$KSB_TARGET" == "LINUX" || "$KSB_TARGET" == "COVERAGE" || "$KSB_TARGET" == "SCAN" ]]; then export PATH=$HOME/.local/bin:$PATH; fi

before_script:
  - git clone https://github.com/KhronosGroup/glslang.git ../glslang
  - git clone https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers.git ../Vulkan-LoaderAndValidationLayers

script:
  - if [[ "$KSB_TARGET" == "LINUX"    ]]; then mkdir build && cd build; fi
  - if [[ "$KSB_TARGET" == "LINUX"    ]]; then cmake -GNinja -DCMAKE_BUILD_TYPE=${VULKAN_SAMPLES_BUILD_TYPE:-Debug} ..; fi
  - if [[ "$KSB_TARGET" == "LINUX"    ]]; then ninja; fi
  - if [[ "$KSB_TARGET" == "OSX"      ]]; then mkdir build && cd build; fi
  - if [[ "$KSB_TARGET" == "OSX"      ]]; then cmake -GNinja -DCMAKE_BUILD_TYPE=${VULKAN_SAMPLES_BUILD_TYPE:-Debug} ..; fi
  - if [[ "$KSB_TARGET" == "OSX"      ]]; then ninja; fi
  - if [[ "$KSB_TARGET" == "ANDROID"  ]]; then ./build_android.sh; fi
  - if [[ "$KSB_TARGET" == "COVERAGE" ]]; then mkdir build && cd build; fi
  - if [[ "$KSB_TARGET" == "COVERAGE" ]]; then cmake -GNinja -DCMAKE_BUILD_TYPE=${VULKAN_SAMPLES_BUILD_TYPE:-Debug} -DENABLE_CODE_COVERAGE=ON ..; fi
  - if [[ "$KSB_TARGET" == "COVERAGE" ]]; then ninja; fi
  - if [[ "$KSB_TARGET" == "SCAN"     ]]; then mkdir build && cd build; fi
  - if [[ "$KSB_TARGET" == "SCAN"     ]]; then scan-build cmake -GNinja -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=Debug ..; fi
  - if [[ "$KSB_TARGET" == "SCAN"     ]]; then scan-build ninja; fi

after_success:
  # Collect coverage and push to coveralls.info.
  # Ignore third party source code and tests.
  - if [[ "$CC" == "gcc" && "$VULKAN_SAMPLES_CODE_COVERAGE" == "ON" ]]; then
      coveralls
        --root ../
        --build-root ./
        --exclude-pattern '.+/external/'
        --exclude-pattern '.+/.+_test/.cc'
        --exclude-pattern '.+/CMakeFiles/'
        --gcov /usr/bin/gcov
        --gcov-options '/--long-file-names --preserve-paths'
        --verbose;
   fi

notifications:
  email:
    recipients:
      - mrelusive@oculus.com
    on_success: change
    on_failure: always
